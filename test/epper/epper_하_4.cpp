#include <iostream>
using namespace std;
#define MAX 1000001

// [*주의] 실제 epper 시험에서는 solution 함수의 내용만 채워주시면 됩니다 !!!!!
// N: 시험장의 개수 N (1 ≤ N ≤ 1,000,000)
// A: 배열, 각 시험장에 있는 응시자의 수 Ai (1 ≤ Ai ≤ 1,000,000)
// B: 총감독관이 한 시험장에서 감시할 수 있는 응시자의 수 (1 ≤ B, C ≤ 1,000,000)
// C: 부감독관이 한 시험장에서 감시할 수 있는 응시자의 수 (1 ≤ B, C ≤ 1,000,000)

long solution(int N, int A[], int B, int C) {
    long answer = 0; // 정답을 리턴할 변수를 선언하고 0으로 초기화합니다.
    // 출력값이 int (2^31-1, 대략 2 * 10^9) 의 범위를 넘어가기 때문에 자료형 선언에 주의해야 합니다.
    
    for (int i = 0; i < N; i++) {
        // 각각의 시험장에 총감독관은 오직 1명만 있어야 합니다.
        A[i] -= B; // 모든 시험장에서 총감독관이 감시할 수 있는 응시자 수를 빼고
        answer++; // 총감독관 수를 더합니다.

        // 이제 A[i] 에는 부감독관이 감시해야할 응시자 수가 저장되어 있습니다.
        if (0 < A[i]) { // 아직 부감독관이 감시해야할 응시자가 남았다면
            answer += A[i] / C; // 응시자 수를 1명의 부감독관이 감시할 수 있는 응시자 수로 나눈 몫을 더해줍니다.
            answer += A[i] % C != 0 ? 1 : 0; // 만약 앞선 나눗셈에서 나머지가 있다면 부감독관이 한 명 더 더해줍니다.
        }
    }
    return answer;
}

int A[MAX];
int main(void) {
    int N = 0, B = 0, C = 0;    
    cin >> N;
    for (int i = 0; i < N; i++)
        cin >> A[i];
    cin >> B >> C;

    cout << solution(N, A, B, C) << "\n";
    return 0;
}